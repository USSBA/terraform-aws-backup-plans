name: 'Integration Tests'

env:
  TERRAFORM_VERSION: 1.12.0

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

defaults:
  run:
    shell: 'bash'

permissions:
  contents: read
  id-token: write

jobs:
  format:
    runs-on: 'ubuntu-latest'
    steps:
      # Checkout the code
      - name: 'checkout'
        uses: 'actions/checkout@v3'
      # Install Terraform with proper permissions
      - name: 'Install Terraform'
        run: |
          wget https://releases.hashicorp.com/terraform/${{ env.TERRAFORM_VERSION }}/terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip
          unzip terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip
          chmod +x terraform
          sudo mv terraform /usr/local/bin/
      # Check the Terraform formatting
      - name: 'check formatting'
        run: |
          terraform fmt -check -recursive
  validate:
    runs-on: 'ubuntu-latest'
    steps:
      # Checkout the code
      - name: 'checkout'
        uses: 'actions/checkout@v3'
      # Install Terraform with proper permissions
      - name: 'Install Terraform'
        run: |
          wget https://releases.hashicorp.com/terraform/${{ env.TERRAFORM_VERSION }}/terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip
          unzip terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip
          chmod +x terraform
          sudo mv terraform /usr/local/bin/
      # Validate the main module (temporarily exclude test files)
      - name: 'validate main module'
        run: |
          # Temporarily rename test files to avoid validation
          find tests -name "*.tftest.hcl" -exec mv {} {}.bak \;
          terraform init
          terraform validate
          # Restore test files
          find tests -name "*.tftest.hcl.bak" -exec sh -c 'mv "$1" "${1%.bak}"' _ {} \;
      - name: 'validate simple example'
        run: |
          cd examples/simple
          terraform init
          terraform validate
      - name: 'validate enterprise example'
        run: |
          cd examples/enterprise
          terraform init
          terraform validate
      - name: 'validate multiple vaults example'
        run: |
          cd examples/multiple_vaults
          terraform init
          terraform validate          
          
  spellcheck:
    runs-on: 'ubuntu-latest'
    steps:
      # Checkout the code
      - name: 'checkout'
        uses: 'actions/checkout@v3'
      # Perform a spellcheck on the markdown files
      # https://github.com/marketplace/actions/github-spellcheck-action
      - name: 'Spellcheck'
        uses: 'rojopolis/spellcheck-github-actions@0.33.0'
        with:
          source_files: 'CHANGELOG.md CONTRIBUTING.md LICENSE.md README.md'
          task_name: 'Markdown'

  test:
    name: 'Run Terraform Tests'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3
        
      - name: 'Set up Python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install boto3
          
      - name: 'Start LocalStack'
        run: |
          docker run -d --name localstack \
            -p 4566:4566 \
            -p 8080:8080 \
            -e SERVICES=s3,dynamodb,iam,sts,cloudwatch,events,secretsmanager \
            -e DEBUG=1 \
            -e DATA_DIR=/tmp/localstack/data \
            -e DEFAULT_REGION=us-east-1 \
            -e AWS_ACCESS_KEY_ID=test \
            -e AWS_SECRET_ACCESS_KEY=test \
            -e AWS_DEFAULT_REGION=us-east-1 \
            -e IGNORE_NON_RETRYABLE_ERROR=1 \
            -e SKIP_SSL_CERT_DOWNLOAD=1 \
            -e SKIP_SSL_CERT_GENERATE=1 \
            localstack/localstack:latest
            
      - name: 'Start mock Backup service'
        run: |
          cd tests
          python -m http.server 5000 &
          echo "$!" > mock_server.pid
          
      - name: 'Wait for services to be ready'
        run: |
          # Wait for LocalStack
          echo "Waiting for LocalStack..."
          until curl -s http://localhost:4566/health | grep -q '"status": "running"'; do
            sleep 1
          done
          echo "LocalStack is ready!"
          
          # Wait for mock Backup service
          echo "Waiting for mock Backup service..."
          until curl -s http://localhost:5000 >/dev/null; do
            sleep 1
          done
          echo "Mock Backup service is ready!"
          
      - name: 'Install Terraform'
        run: |
          wget https://releases.hashicorp.com/terraform/${{ env.TERRAFORM_VERSION }}/terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip
          unzip terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          
      - name: 'Run Terraform tests with mock services'
        working-directory: ./tests
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: |
          # Initialize Terraform
          terraform init
          
          # Run only the mock-based tests
          echo "Running tests..."
          terraform test -test-filter=backup_mock_test.tftest.hcl -json | tee test_output.json
          
          # Check for test failures
          if grep -q '"@level":"error"' test_output.json; then
            echo "Tests failed"
            exit 1
          fi
          
      - name: 'Cleanup'
        if: always()
        run: |
          # Stop mock Backup service
          if [ -f tests/mock_server.pid ]; then
            kill $(cat tests/mock_server.pid) || true
          fi
          
          # Stop LocalStack
          docker stop localstack || true
          docker rm -f localstack || true
